import React, { Fragment, PureComponent } from 'react'import { translate } from 'react-i18next'import {  ActivityIndicator,  Animated,  Dimensions,  FlatList,  Image,  Modal,  PermissionsAndroid,  RefreshControl,  ScrollView,  StyleSheet,  Text,  TouchableOpacity,  View,} from 'react-native'import { RNCamera } from 'react-native-camera'// eslint-disable-next-line import/defaultimport CameraRoll from '@react-native-community/cameraroll'import { sp } from '../../../../utils/func'import { fonts } from '../../../../styles/vars'import { SafeAreaView } from 'react-navigation'import CustomIcon from '../../../../components/Icons/Fontello'import { Icon } from 'react-native-elements'import Icons from 'react-native-vector-icons/MaterialCommunityIcons'import { IS_IOS, USER_SCREENS } from '../../../../constants/common'const styles = StyleSheet.create({  container: {    backgroundColor: 'white',    position: 'absolute',    bottom: 0,    left: 0,    right: 0,    top: 0,    zIndex: 99,  },  preview: {    flex: 1,    justifyContent: 'flex-end',    alignItems: 'center',    width: '100%',  },  capture: {    alignSelf: 'center',    width: 65,    height: 65,    borderRadius: 32.5,    borderColor: 'white',    borderWidth: 5,    marginBottom: 20,  },  nav: {    height: 33,    alignSelf: 'center',    flex: 1,  },  navText: {    fontSize: sp(18),    fontFamily: fonts.semiBold,    textAlign: 'center',  },  rowAlbum: {    height: 62.5,    flexDirection: 'row-reverse',    justifyContent: 'space-between',    alignItems: 'center',    marginBottom: 16,    paddingRight: 6,    alignContent: 'center',  },  photo: {    flexDirection: 'column',    alignItems: 'center',    justifyContent: 'center',    flex: 1,  },  itemInvisible: {    backgroundColor: 'transparent',  },  closeCameraAndCameraRoll: {    position: 'absolute',    top: 20,    right: 17.5,    zIndex: 99,  },})@translate()export default class CameraModal extends PureComponent {  constructor (props) {    super(props)    this.state = {      uploadPhotosPressDisabled: false,      tabType: 'RNCamera',      albums: [],      photos: [],      cameraRollType: null,      pictures: [],      slide: new Animated.Value(Dimensions.get('window').height),      takeMorePhotos: false,      alertMoreThanFive: false,      fadeAnim: new Animated.Value(0),      refreshing: false,      endCursor: false,      loadingMore: false,      containerSelectedPhotos: [],      alertMoreThanThirty: false,      fadeAnimThirty: new Animated.Value(0),      refreshingPhotos: false,      photosSelected: [],      idxEditPhotos: 0,      modalAlert: {        visible: false,        children: {          header: null,          body: null,          footer: null,        },        styleWrap: null,      },    }    this.slide()  }  takePicture = async () => {    if (this.camera) {      const pictures = JSON.parse(JSON.stringify(this.state.pictures))      if (pictures.length >= 5) {        if (!this.state.alertMoreThanFive) {          const {            fadeAnim,          } = this.state          return Animated.timing(            fadeAnim,            {              toValue: 1,              duration: 600,            },          ).start(() => {            this.setState({              alertMoreThanFive: true,            }, () => {              setTimeout(() => {                Animated.timing(                  fadeAnim,                  {                    toValue: 0,                    duration: 300,                  },                ).start(() => {                  this.setState({                    alertMoreThanFive: false,                  })                })              }, 3000)            })          })        }        return      }      const options = { orientation: 'portrait', fixOrientation: true }      const data = await this.camera.takePictureAsync(options)      // console.log(data)      pictures.push({        uri: data.uri,        check: true,      })      this.setState({        takeMorePhotos: false,        pictures,      })    }  }  takeMorePicture = () => {    this.setState({      takeMorePhotos: true,    })  }  getPhotos = (album, isRefresh) => () => {    const {      endCursor,      photos,    } = this.state    this.setState({      refreshingPhotos: true,      refreshing: true,      cameraRollType: album,    })    const params = album.title === 'כל התמונות' ? {      first: 20,      assetType: 'Photos',    } : {      first: 20,      assetType: 'Photos',      groupTypes: 'Album',      groupName: album.title,    }    if (endCursor && !isRefresh) {      params.after = endCursor    }    CameraRoll.getPhotos(params)      .then(r => {        console.log('getPhotos---', r)        const allThePhotos = (params.after && photos.length > 0) ? JSON.parse(JSON.stringify(photos)).concat(r.edges) : r.edges        console.log('Photos---', allThePhotos)        this.setState({          refreshing: false,          photos: allThePhotos,          endCursor: r.page_info.has_next_page ? r.page_info.end_cursor : false,          loadingMore: false,        }, () => {          setTimeout(() => {            this.setState({              refreshingPhotos: false,            })          }, 10)        })      })      .catch((err) => {        console.log(err)      })  }  async requestExternalStoreageRead () {    try {      if (!IS_IOS) {        const granted = await PermissionsAndroid.request(          PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE,          {            'title': 'הרשאות לשימוש באיחסון',            'message': 'אנו זקוקים להרשאה שלך כדי להשתמש באיחסון',            buttonPositive: 'אישור',            buttonNegative: 'ביטול',          }        )        return granted === PermissionsAndroid.RESULTS.GRANTED      } else {        return true      }    } catch (err) {      return false    }  }  getAlbums = async () => {    USER_SCREENS.shouldHandleBackground = false    if (await this.requestExternalStoreageRead()) {      this.setState({        refreshingPhotos: true,      })      USER_SCREENS.shouldHandleBackground = true      CameraRoll.getAlbums({        assetType: 'Photos',      })        .then(r => {          console.log('getAlbums---', r)          r.unshift({            count: null,            title: 'כל התמונות',          })          this.setState({            refreshing: false,            photos: [],            endCursor: false,            loadingMore: false,            albums: r,          }, () => {            setTimeout(() => {              this.setState({                refreshingPhotos: false,              })            }, 10)          })        })        .catch((err) => {          console.log(err)        })    } else {      USER_SCREENS.shouldHandleBackground = true    }  }  setTab = (tabType) => () => {    this.setState({      tabType,      loadingMore: false,      cameraRollType: null,      containerSelectedPhotos: [],    }, () => {      if (tabType === 'CameraRoll') {        this.getAlbums().then(r => {        })      }    })  }  slide = () => {    Animated.timing(this.state.slide, {      toValue: 0,      duration: 200,    }).start()  }  slideClose = () => {    const {      closeCameraAndCameraRoll,    } = this.props    Animated.timing(this.state.slide, {      toValue: Dimensions.get('window').height,      duration: 200,    }).start(() => closeCameraAndCameraRoll())  }  share = (uri) => {    // RNFetchBlob.fs.readFile(uri, 'base64')    //   .then((data) => {    //     let url = `data:image/jpg;base64,${data}`    //   })  }  returnToCamera = () => {    this.setState({      pictures: [],      takeMorePhotos: false,    })  }  checkPhoto = (idx) => () => {    const pictures = JSON.parse(JSON.stringify(this.state.pictures))    pictures[idx].check = !pictures[idx].check    this.setState({      pictures,    })  }  renderAlbum = ({ item, index }) => {    return (      <TouchableOpacity        key={index}        onPress={this.getPhotos(item)}        style={styles.rowAlbum}>        <View style={{          flexDirection: 'column',          alignItems: 'flex-end',          justifyContent: 'center',        }}>          <Text style={{            color: '#022258',            fontSize: sp(17),            fontFamily: fonts.regular,          }}> {item.title} </Text>          {item.count && (            <Text style={{              color: '#022258',              fontSize: sp(15),              fontFamily: fonts.light,            }}> ({item.count}) </Text>          )}        </View>        <Icon          iconStyle={{            marginLeft: -7,          }}          name='chevron-thin-left'          type='entypo'          size={24}          color={'#022258'}        />      </TouchableOpacity>    )  }  renderPhotos = ({ item, index }) => {    if (item.empty === true) {      return <View style={[styles.photo, styles.itemInvisible]} />    }    const {      containerSelectedPhotos,    } = this.state    let idx = -1    if (containerSelectedPhotos.length) {      idx = containerSelectedPhotos.findIndex(it => it.uri === item.node.image.uri && it.group_name === item.node.group_name)    }    return (      <TouchableOpacity        key={index}        onPress={this.addPhotoToContainer(item.node)}        style={[styles.photo, { height: Dimensions.get('window').width / 3 }]}>        <View style={{          width: 85,          height: 90,          position: 'relative',        }}>          <View style={{            width: 15.5,            height: 15.5,            borderRadius: 7.75,            borderColor: 'white',            borderWidth: 1,            backgroundColor: 'transparent',            position: 'absolute',            top: 2,            right: 2,            zIndex: 999,          }}>            <View style={{              width: 14,              height: 14,              backgroundColor: (idx !== -1) ? '#022258' : 'white',              borderRadius: 7,              opacity: (idx !== -1) ? 1 : 0.4,            }}>              {(idx !== -1) && (                <Text style={{                  fontSize: sp(10.5),                  color: '#ffffff',                  fontFamily: fonts.semiBold,                  textAlign: 'center',                }}>{idx + 1}</Text>              )}            </View>          </View>          <Image            resizeMode='cover'            style={{              width: 85,              height: 90,              // width: '100%',              // height: '100%',            }}            source={{ uri: item.node.image.uri }}          />        </View>      </TouchableOpacity>    )  }  addPhotoToContainer = (node) => () => {    const {      containerSelectedPhotos,    } = this.state    const containerSelectedPhotosSrc = JSON.parse(JSON.stringify(containerSelectedPhotos))    if (containerSelectedPhotosSrc.length) {      const idx = containerSelectedPhotosSrc.findIndex(it => it.uri === node.image.uri && it.group_name === node.group_name)      if (idx === -1) {        if (containerSelectedPhotosSrc.length <= 29) {          containerSelectedPhotosSrc.push({            uri: node.image.uri,            group_name: node.group_name,            filename: node.image.filename,          })          this.setState({            containerSelectedPhotos: containerSelectedPhotosSrc,          })        } else {          if (!this.state.alertMoreThanThirty) {            const {              fadeAnimThirty,            } = this.state            return Animated.timing(              fadeAnimThirty,              {                toValue: 1,                duration: 600,              },            ).start(() => {              this.setState({                alertMoreThanThirty: true,              }, () => {                setTimeout(() => {                  Animated.timing(                    fadeAnimThirty,                    {                      toValue: 0,                      duration: 300,                    },                  ).start(() => {                    this.setState({                      alertMoreThanThirty: false,                    })                  })                }, 3000)              })            })          }        }      } else {        containerSelectedPhotosSrc.splice(idx, 1)        this.setState({          containerSelectedPhotos: containerSelectedPhotosSrc,        })      }    } else {      containerSelectedPhotosSrc.push({        uri: node.image.uri,        group_name: node.group_name,        filename: node.image.filename,      })      this.setState({        containerSelectedPhotos: containerSelectedPhotosSrc,      })    }  }  backToAlbums = () => {    this.setState({      photos: [],      refreshing: true,      loadingMore: false,      cameraRollType: null,      endCursor: false,    }, () => {      setTimeout(() => {        this.setState({          refreshing: false,        })      }, 10)    })  }  _onRefresh = () => {    const { tabType, cameraRollType } = this.state    this.setState({ refreshing: true })    if (tabType === 'CameraRoll') {      if (cameraRollType === null) {        this.getAlbums().then(r => {        })      } else {        this.getPhotos(cameraRollType, true)()      }    }  }  renderSeparatorView = () => {    return (      <View style={{        height: 19,        width: '100%',      }} />    )  }  formatRow = (dataArr, numColumns) => {    const data = JSON.parse(JSON.stringify(dataArr))    const numberOfFullRows = Math.floor(data.length / numColumns)    let numberOfElementsLastRow = data.length - (numberOfFullRows * numColumns)    while (numberOfElementsLastRow !== numColumns && numberOfElementsLastRow !== 0) {      data.push({ key: `blank-${numberOfElementsLastRow}`, empty: true })      numberOfElementsLastRow++    }    return data  }  cleanContainerSelectedPhotos = () => {    this.setState({      containerSelectedPhotos: [],    })  }  goToEditPhotosScreen = () => {    const { containerSelectedPhotos, pictures, tabType } = this.state    const list = tabType === 'RNCamera' ? pictures : containerSelectedPhotos    const photosSelected = list.map(item => {      let filename      if (tabType === 'RNCamera') {        filename = !IS_IOS ? item.uri : item.uri.replace('file://', '')        if (item.uri.includes('/')) {          const path = item.uri.split('/')          filename = path[path.length - 1]        }      } else {        filename = item.filename      }      return {        type: 'image/jpeg',        uri: item.uri,        name: filename,      }    })    this.setState({      tabType: 'EditPhotos',      photosSelected,      idxEditPhotos: 0,    }, () => {    })  }  selectPhoto = (idx) => () => {    this.setState({      idxEditPhotos: idx,    })  }  uploadPhotos = () => {    console.log('uploadPhotos')    const { uploadPhotos } = this.props    const { photosSelected, uploadPhotosPressDisabled } = this.state    if (!uploadPhotosPressDisabled) {      this.setState({        uploadPhotosPressDisabled: true,      })      console.log(photosSelected)      uploadPhotos(photosSelected)    }  }  closeAlertModal = () => {    const modalAlert = Object.assign({}, this.state.modalAlert)    modalAlert.visible = false    modalAlert.children = {      header: null,      body: null,      footer: null,    }    modalAlert.styleWrap = null    this.setState({      modalAlert,    })  }  closeCameraModal = () => {    const { containerSelectedPhotos, pictures, photosSelected, tabType } = this.state    let photosSelectedLength = 0    if (tabType === 'RNCamera') {      photosSelectedLength = pictures.filter(it => it.check).length > 0    } else if (tabType === 'CameraRoll') {      photosSelectedLength = containerSelectedPhotos.length > 0    } else if (tabType === 'EditPhotos') {      photosSelectedLength = photosSelected.length > 0    }    if (photosSelectedLength) {      const modalAlert = Object.assign({}, this.state.modalAlert)      modalAlert.visible = true      modalAlert.children = {        header: (<View style={{          height: 40,          flexDirection: 'row-reverse',          justifyContent: 'flex-start',          alignSelf: 'flex-end',          width: 137,          borderBottomWidth: 1,          borderBottomColor: '#022258',        }}>          <Text style={{            paddingHorizontal: 20,            paddingTop: 10,            color: '#022258',            fontSize: sp(18),            fontFamily: fonts.semiBold,            textAlign: 'center',          }}>{'לתשומת ליבך'}</Text>        </View>),        body: (<Text style={{          paddingHorizontal: 20,          color: '#022258',          fontSize: sp(18),          fontFamily: fonts.semiBold,          textAlign: 'right',        }}>{'יציאה תמחק את כל התמונות שבחרת,\n' +        'האם לצאת?'}</Text>),        footer: (          <View style={{            marginHorizontal: 20,            height: 45,            flexDirection: 'row-reverse',            justifyContent: 'flex-end',          }}>            <TouchableOpacity              onPress={this.closeAlertModal}              style={{                width: 65,              }}>              <Text style={{                color: '#038ed6',                fontSize: sp(18),                fontFamily: fonts.semiBold,              }}>                {'ביטול'}              </Text>            </TouchableOpacity>            <TouchableOpacity              onPress={this.slideClose}              style={{                width: 65,              }}>              <Text style={{                color: '#038ed6',                fontSize: sp(18),                fontFamily: fonts.semiBold,              }}>                {'אישור'}              </Text>            </TouchableOpacity>          </View>        ),      }      modalAlert.styleWrap = {        backgroundColor: 'white',        borderRadius: 8,        position: 'absolute',        top: 127,        right: '50%',        marginRight: -160,        height: 174.5,        width: 320,        flexDirection: 'column',      }      this.setState({        modalAlert,      })    } else {      this.slideClose()    }  }  removePhotoFromSelectedPhotos = () => {    const { photosSelected, idxEditPhotos } = this.state    const photosSelectedSave = JSON.parse(JSON.stringify(photosSelected))    photosSelectedSave.splice(idxEditPhotos, 1)    if (photosSelectedSave.length) {      this.setState({        photosSelected: photosSelectedSave,        idxEditPhotos: 0,      })    } else {      this.slideClose()    }  }  containerTouched = () => {    if (this.state.alertMoreThanFive) {      const {        fadeAnim,      } = this.state      Animated.timing(        fadeAnim,        {          toValue: 0,          duration: 100,        },      ).start(() => {        this.setState({          alertMoreThanFive: false,        })      })    }    if (this.state.alertMoreThanThirty) {      const {        fadeAnimThirty,      } = this.state      Animated.timing(        fadeAnimThirty,        {          toValue: 0,          duration: 100,        },      ).start(() => {        this.setState({          alertMoreThanThirty: false,        })      })    }    console.log('containerTouched')  }  render () {    const { tabType, photos, albums, cameraRollType, pictures, slide, takeMorePhotos, alertMoreThanFive, fadeAnim, refreshing, endCursor, alertMoreThanThirty, fadeAnimThirty, containerSelectedPhotos, refreshingPhotos, photosSelected, idxEditPhotos, modalAlert, uploadPhotosPressDisabled } = this.state    let picturesCheck = 0    if (tabType === 'RNCamera' && (pictures.length > 1 || (pictures.length === 1 && takeMorePhotos === true))) {      picturesCheck = pictures.filter(it => it.check).length    }    return (      <Animated.View        onStartShouldSetResponder={this.containerTouched}        style={[styles.container, {          transform: [            {              translateY: slide,            },          ],        }]}>        <SafeAreaView style={{          flex: 1,          flexDirection: 'column',        }}>          {tabType === 'RNCamera' && (            <Fragment>              <TouchableOpacity                hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}                onPress={(tabType === 'RNCamera' && (pictures.length === 1) && (takeMorePhotos === false)) ? this.returnToCamera : this.closeCameraModal}                style={styles.closeCameraAndCameraRoll}>                {(tabType === 'RNCamera' && (pictures.length === 1) && (takeMorePhotos === false)) ? (                  <Image                    style={[{                      alignSelf: 'center',                      resizeMode: 'contain',                      width: 11.5,                      height: 20,                    }]}                    source={require('BiziboxUI/assets/returnToCamera.png')}                  />                ) : (                  <Image                    style={[{                      alignSelf: 'center',                      resizeMode: 'contain',                      width: 17,                      height: 17,                    }]}                    source={require('BiziboxUI/assets/closeCameraModal.png')}                  />                )}              </TouchableOpacity>              {(pictures.length === 0 || pictures.length > 1 || (pictures.length === 1 && (takeMorePhotos === true))) && (                <RNCamera                  ref={ref => {                    this.camera = ref                  }}                  style={styles.preview}                  type={RNCamera.Constants.Type.back}                  flashMode={RNCamera.Constants.FlashMode.auto}                  androidCameraPermissionOptions={{                    title: 'הרשאת צפיה במצלמה',                    message: 'אנו זקוקים להרשאה שלך כדי להשתמש במצלמה',                    buttonPositive: 'אישור',                    buttonNegative: 'ביטול',                  }}                  androidRecordAudioPermissionOptions={{                    title: 'הרשאת הקלטת קול במצלמה',                    message: 'אנו זקוקים להרשאה שלך כדי להשתמש בהקלטת קול במצלמה',                    buttonPositive: 'אישור',                    buttonNegative: 'ביטול',                  }}                  onGoogleVisionBarcodesDetected={({ barcodes }) => {                    console.log(barcodes)                  }}>                  {({ camera, status, recordAudioPermissionStatus }) => {                    USER_SCREENS.shouldHandleBackground = false                    if (status !== 'READY') return <ActivityIndicator />                    USER_SCREENS.shouldHandleBackground = true                    return (                      <Fragment>                        {alertMoreThanFive && (                          <Animated.View style={{                            opacity: fadeAnim,                            flexDirection: 'row-reverse',                            justifyContent: 'center',                            alignContent: 'center',                            alignItems: 'center',                            height: 40,                            width: 261.5,                            zIndex: 99,                            backgroundColor: '#022258',                            borderRadius: 20,                            marginBottom: 136,                          }}>                            <Text style={{                              alignSelf: 'center',                              color: '#ffffff',                              fontSize: sp(16.5),                              fontFamily: fonts.regular,                              textAlign: 'center',                            }}>{'לא ניתן לצלם יותר מ- 5 תמונות ברצף'}</Text>                          </Animated.View>                        )}                        {(tabType === 'RNCamera' && (pictures.length > 1 || (pictures.length === 1 && takeMorePhotos === true))) && (                          <View style={{                            flexDirection: 'row',                            justifyContent: 'center',                            height: 132,                            zIndex: 99,                          }}>                            <TouchableOpacity                              onPress={this.goToEditPhotosScreen}                              hitSlop={{ top: 5, bottom: 5, left: 5, right: 5 }}                              style={{                                width: 50,                                height: 50,                                alignItems: 'center',                                alignContent: 'center',                                justifyContent: 'center',                                flexDirection: 'column',                                borderRadius: 25,                                backgroundColor: '#00215c',                                position: 'absolute',                                top: 0,                                left: 31,                                zIndex: 999,                              }}>                              <Text style={{                                position: 'absolute',                                bottom: 10,                                right: 12,                                color: '#ffffff',                                fontSize: sp(15),                                fontFamily: fonts.regular,                              }}>{picturesCheck}</Text>                              <CustomIcon                                style={{                                  marginTop: -5,                                  marginLeft: -3,                                }}                                name={'tick'}                                size={20}                                color={'#ffffff'} />                            </TouchableOpacity>                            <ScrollView                              showsHorizontalScrollIndicator={false}                              horizontal                              scrollEventThrottle={16}                              contentContainerStyle={{                                flexDirection: 'row-reverse',                                alignSelf: 'center',                                zIndex: 996,                                alignItems: 'center',                                alignContent: 'center',                                justifyContent: 'center',                                height: 91,                              }}>                              {pictures.map((p, i) => {                                return (                                  <TouchableOpacity                                    onPress={this.checkPhoto(i)}                                    style={{                                      borderColor: '#a39c93',                                      borderWidth: 1,                                      marginLeft: (i + 1 === pictures.length) ? 22.5 : 6.5,                                      position: 'relative',                                    }}                                    key={i}>                                    <Image                                      resizeMode='cover'                                      style={{                                        width: 73,                                        height: 91,                                      }}                                      source={{ uri: p.uri }}                                    />                                    {p.check === true && (                                      <CustomIcon                                        style={{                                          position: 'absolute',                                          top: 35,                                          right: 22.5,                                          zIndex: 999,                                        }}                                        name={'tick'}                                        size={24}                                        color={'#ffffff'} />                                    )}                                  </TouchableOpacity>                                )                              })}                            </ScrollView>                          </View>)}                        <TouchableOpacity onPress={this.takePicture} style={styles.capture} />                      </Fragment>                    )                  }}                </RNCamera>              )}              {((pictures.length === 1 && takeMorePhotos === false)) && (                <Image                  resizeMode='stretch'                  style={{                    alignSelf: 'center',                    width: '100%',                    height: '100%',                    flex: 1,                  }}                  source={{ uri: pictures[0].uri }}                />              )}              {(pictures.length === 1 && takeMorePhotos === false) && (                <View style={{                  flexDirection: 'row-reverse',                  justifyContent: 'space-between',                  alignContent: 'flex-start',                  height: 80,                  paddingHorizontal: 22.5,                  position: 'absolute',                  bottom: 0,                  right: 0,                  left: 0,                  zIndex: 99,                }}>                  <TouchableOpacity                    hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}                    onPress={this.takeMorePicture}                    style={{                      width: 40,                      height: 40,                      alignItems: 'center',                      alignContent: 'center',                      justifyContent: 'center',                      flexDirection: 'column',                    }}>                    <CustomIcon                      name={'take-again-photo'}                      size={35}                      color={'#ffffff'} />                  </TouchableOpacity>                  <TouchableOpacity                    onPress={this.goToEditPhotosScreen}                    hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}                    style={{                      width: 40,                      height: 40,                      alignItems: 'center',                      alignContent: 'center',                      justifyContent: 'center',                      flexDirection: 'column',                      borderRadius: 20,                      backgroundColor: '#00215c',                    }}>                    <CustomIcon                      style={{                        transform: [{ rotate: '180deg' }],                        marginRight: 5,                      }}                      name={'send-photos'}                      size={18}                      color={'#ffffff'} />                  </TouchableOpacity>                </View>              )}            </Fragment>          )}          {tabType === 'CameraRoll' && (            <Fragment>              <View style={{                height: 45,                borderBottomWidth: 1,                borderBottomColor: '#022258',                flexDirection: 'row-reverse',                justifyContent: cameraRollType === null ? 'space-between' : 'flex-start',                alignItems: 'center',                alignContent: 'center',                marginHorizontal: 10,                marginTop: 5,              }}>                {((cameraRollType === null && containerSelectedPhotos.length === 0) || cameraRollType !== null) && (                  <TouchableOpacity                    hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}                    onPress={(cameraRollType === null) ? this.setTab('RNCamera') : this.backToAlbums}                    style={{                      marginRight: -6,                      marginTop: -3,                    }}>                    <Icon                      name='chevron-small-right'                      type='entypo'                      size={50}                      color={'#022258'}                    />                  </TouchableOpacity>                )}                {(cameraRollType === null && containerSelectedPhotos.length > 0) && (                  <TouchableOpacity                    hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}                    onPress={this.goToEditPhotosScreen}                    style={{                      marginRight: 5,                      width: 36,                      height: 36,                      alignItems: 'center',                      alignContent: 'center',                      justifyContent: 'center',                      flexDirection: 'column',                      borderRadius: 18,                      backgroundColor: '#00215c',                      zIndex: 999,                    }}>                    <Text style={{                      position: 'absolute',                      bottom: 7.5,                      right: 5,                      color: '#ffffff',                      fontSize: sp(10.5),                      fontFamily: fonts.regular,                    }}>{containerSelectedPhotos.length}</Text>                    <CustomIcon                      style={{                        marginTop: -3,                        marginLeft: -1,                      }}                      name={'tick'}                      size={19}                      color={'#ffffff'} />                  </TouchableOpacity>                )}                {cameraRollType !== null && (                  <Fragment>                    <View style={{                      alignSelf: 'center',                      flex: 90,                    }}>                      <Text style={{                        fontSize: sp(19),                        color: '#022258',                        fontFamily: fonts.semiBold,                        textAlign: 'center',                      }}>{cameraRollType.title}</Text>                    </View>                    <View style={{                      flex: 10,                    }} />                  </Fragment>                )}                {(cameraRollType === null) && (                  <TouchableOpacity                    hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}                    onPress={this.closeCameraModal}                    style={{                      marginLeft: 5,                      marginTop: 6,                    }}>                    <Icons                      name='close'                      size={32}                      color={'#022258'}                    />                  </TouchableOpacity>                )}              </View>              {(((cameraRollType === null && refreshingPhotos) && albums && albums.length === 0) || ((cameraRollType !== null) && photos && photos.length === 0)) && (                <View style={{                  flex: 1,                  justifyContent: 'center',                  alignItems: 'center',                }}><ActivityIndicator /></View>)}              {(((cameraRollType === null && !refreshingPhotos) && albums && albums.length === 0)) && (                <View style={{                  flex: 1,                  justifyContent: 'center',                  alignItems: 'center',                }}>                  <Text style={{                    fontSize: sp(24),                    color: '#022258',                    fontFamily: fonts.semiBold,                    textAlign: 'center',                  }}>{'לא נמצאו אלבומים'}</Text>                </View>)}              {(((cameraRollType === null) && albums && albums.length > 0) || ((cameraRollType !== null) && photos && photos.length > 0)) && (                <Fragment>                  <FlatList                    refreshControl={                      <RefreshControl                        refreshing={refreshing}                        onRefresh={this._onRefresh}                      />                    }                    extraData={refreshing || refreshingPhotos}                    showsVerticalScrollIndicator={false}                    style={{                      marginHorizontal: 10,                      borderBottomWidth: 1,                      borderBottomColor: '#022258',                      // transform: [{ scaleX: (cameraRollType === null) ? 1 : -1 }],                    }}                    contentStyle={{                      flex: 1,                      justifyContent: 'flex-end',                      alignItems: 'center',                    }}                    horizontal={false}                    scrollEventThrottle={IS_IOS ? 16 : 1}                    data={(cameraRollType === null) ? albums : this.formatRow(photos, 3)}                    renderItem={(cameraRollType === null) ? this.renderAlbum : this.renderPhotos}                    keyExtractor={(item, index) => cameraRollType === null ? `${item.title}` : `${index}`}                    bounces                    bouncesZoom                    initialNumToRender={20}                    enableOnAndroid                    removeClippedSubviews                    key={cameraRollType}                    numColumns={(cameraRollType === null) ? 1 : 3}                    ItemSeparatorComponent={cameraRollType === null ? null : this.renderSeparatorView}                    onEndReachedThreshold={0.01}                    ListFooterComponent={() => (cameraRollType !== null && this.state.loadingMore && endCursor)                      ? <ActivityIndicator /> : null}                    onEndReached={(distanceFromEnd) => {                      if (cameraRollType !== null && !this.state.loadingMore && endCursor) {                        this.setState({ loadingMore: true }, () => {                          console.log('onEndReached', distanceFromEnd)                          this.getPhotos(cameraRollType)()                        })                      }                    }}                  />                  {alertMoreThanThirty && (                    <Animated.View                      style={{                        position: 'absolute',                        top: 257,                        left: '50%',                        opacity: fadeAnimThirty,                        flexDirection: 'row-reverse',                        justifyContent: 'center',                        alignContent: 'center',                        alignItems: 'center',                        height: 40,                        width: 261.5,                        zIndex: 99,                        backgroundColor: '#022258',                        borderRadius: 20,                        marginBottom: 136,                        marginLeft: -130.75,                      }}>                      <Text style={{                        alignSelf: 'center',                        color: '#ffffff',                        fontSize: sp(16.5),                        fontFamily: fonts.regular,                        textAlign: 'center',                      }}>{'לא ניתן לבחור יותר מ- 30 תמונות'}</Text>                    </Animated.View>                  )}                </Fragment>              )}            </Fragment>          )}          {(tabType === 'CameraRoll' || (tabType === 'RNCamera' && pictures.length === 0)) && (            <View style={{              flex: 0,              flexDirection: 'row-reverse',              justifyContent: 'center',              height: 60,              backgroundColor: 'white',              paddingHorizontal: 15,            }}>              {containerSelectedPhotos.length > 0 ? (                <View                  style={[styles.nav, {                    opacity: 0.4,                    borderBottomWidth: 2,                    borderBottomColor: (tabType === 'RNCamera') ? '#022258' : '#cdcdcd',                  }]}>                  <Text style={[                    styles.navText,                    {                      opacity: 0.4,                      color: (tabType === 'RNCamera') ? '#022258' : '#cdcdcd',                    },                  ]}> מצלמה </Text>                </View>              ) : (                <TouchableOpacity onPress={containerSelectedPhotos.length > 0 ? null : this.setTab('RNCamera')}                  activeOpacity={containerSelectedPhotos.length > 0 ? 0.4 : 0.6}                  style={[styles.nav, {                    opacity: containerSelectedPhotos.length > 0 ? 0.4 : 1,                    borderBottomWidth: 2,                    borderBottomColor: (tabType === 'RNCamera') ? '#022258' : '#cdcdcd',                  }]}>                  <Text style={[                    styles.navText,                    {                      opacity: containerSelectedPhotos.length > 0 ? 0.4 : 1,                      color: (tabType === 'RNCamera') ? '#022258' : '#cdcdcd',                    },                  ]}> מצלמה </Text>                </TouchableOpacity>              )}              <TouchableOpacity onPress={this.setTab('CameraRoll')}                style={[styles.nav, {                  borderBottomWidth: 2,                  borderBottomColor: (tabType === 'CameraRoll') ? '#022258' : '#cdcdcd',                }]}>                <Text style={[                  styles.navText,                  {                    color: (tabType === 'CameraRoll') ? '#022258' : '#cdcdcd',                  },                ]}> גלריה </Text>              </TouchableOpacity>            </View>          )}          {tabType === 'EditPhotos' && (            <Fragment>              <View style={{                flex: 1,              }}>                <View style={{                  flexDirection: 'row-reverse',                  justifyContent: 'space-between',                  alignContent: 'flex-start',                  height: 40,                  paddingHorizontal: 22.5,                  position: 'absolute',                  top: 15,                  right: 0,                  left: 0,                  zIndex: 99,                }}>                  <TouchableOpacity                    hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}                    onPress={this.closeCameraModal}                    style={{                      width: 20,                      height: 30,                      alignItems: 'center',                      alignContent: 'center',                      justifyContent: 'center',                      flexDirection: 'column',                    }}>                    <Image                      style={[{                        alignSelf: 'center',                        resizeMode: 'contain',                        width: 17,                        height: 17,                      }]}                      source={require('BiziboxUI/assets/closeCameraModal.png')}                    />                  </TouchableOpacity>                  <TouchableOpacity                    onPress={this.removePhotoFromSelectedPhotos}                    hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}                    style={{                      width: 20,                      height: 30,                      alignItems: 'center',                      alignContent: 'center',                      justifyContent: 'center',                      flexDirection: 'column',                    }}>                    <CustomIcon                      style={{                        textShadowColor: 'rgba(0, 0, 0, 0.40)',                        textShadowOffset: { width: 1, height: 1 },                        textShadowRadius: 1,                      }}                      name={'trash-ocr'}                      size={22}                      color={'#ffffff'} />                  </TouchableOpacity>                </View>                {(photosSelected.length > 0) && (                  <Fragment>                    <Image                      resizeMode='stretch'                      style={{                        alignSelf: 'center',                        width: '100%',                        height: '100%',                        flex: 1,                      }}                      source={{ uri: photosSelected[idxEditPhotos].uri }}                    />                  </Fragment>                )}              </View>              <SafeAreaView style={{                backgroundColor: 'white',                height: 80,                position: 'relative',              }}>                <ScrollView                  showsHorizontalScrollIndicator={false}                  horizontal                  scrollEventThrottle={16}                  style={{                    flex: 1,                    elevation: 7,                    zIndex: 97,                  }}                  contentContainerStyle={{                    flexDirection: 'row',                    alignSelf: 'center',                    zIndex: 996,                    alignItems: 'center',                    alignContent: 'center',                    justifyContent: 'center',                    height: 80,                    paddingTop: 10,                    marginBottom: 2,                  }}>                  {photosSelected.map((p, i) => {                    return (                      <TouchableOpacity                        onPress={this.selectPhoto(i)}                        style={{                          borderColor: idxEditPhotos === i ? '#022258' : 'transparent',                          borderWidth: 2,                          marginLeft: (i === 0) ? 10 : 2,                          position: 'relative',                        }}                        key={i}>                        <Image                          resizeMode='cover'                          style={{                            width: 71,                            height: 70,                          }}                          source={{ uri: p.uri }}                        />                      </TouchableOpacity>                    )                  })}                </ScrollView>              </SafeAreaView>              <TouchableOpacity                activeOpacity={uploadPhotosPressDisabled ? 1 : 0.7}                onPress={uploadPhotosPressDisabled ? null : this.uploadPhotos}                hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}                style={{                  width: 50,                  height: 50,                  alignItems: 'center',                  alignContent: 'center',                  justifyContent: 'center',                  flexDirection: 'column',                  borderRadius: 25,                  backgroundColor: '#00215c',                  position: 'absolute',                  bottom: IS_IOS ? 125 : 60,                  left: 7,                  zIndex: 99,                  elevation: 9,                }}>                <CustomIcon                  style={{                    transform: [{ rotate: '180deg' }],                    marginRight: 5,                  }}                  name={'send-photos'}                  size={18}                  color={'#ffffff'} />              </TouchableOpacity>            </Fragment>          )}          <Modal            animationType='none'            transparent            visible={modalAlert && modalAlert.visible}>            <View style={{              flex: 1,              backgroundColor: 'rgba(0,0,0,0.75)',            }}>              <View style={modalAlert.styleWrap ? modalAlert.styleWrap : {}}>                {modalAlert.children.header}                <View style={{                  flex: 1,                  flexDirection: 'row-reverse',                  justifyContent: 'flex-start',                  marginTop: 20,                }}>                  {modalAlert.children.body}                </View>                {modalAlert.children.footer}              </View>            </View>          </Modal>        </SafeAreaView>      </Animated.View>    )  }}